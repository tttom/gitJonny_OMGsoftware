%%% Function:           determineTrapBeamProfile
%%% Author:             Jonathan Nylk
%%% Created:            21/07/2015
%%% Description:        This function determines x-, y-, and z-axis beam
%%%                     profile through the maximum pixels in a z-stack of
%%%                     images acquired of an optical trap.
%%%                     The z-stack data can either be input as a 3d array
%%%                     or a details for a file structure leading to the
%%%                     image stack.
%%%
%%% Updates (latest first):
%%%
%%%
%%% END

function [xWidth,yWidth,zWidth]=determineTrapBeamProfile(dataMatrix,imageFolder,baseFileName,fileType,magnification,zStepSize)

    %default values
    if nargin<1
        dataMatrix=[];
    end
    if nargin<2
        imageFolder='C:\Users\Jonny\Dropbox\GRINLensTrapPaper\DataAnalysis\TrapProfile\TrapProfileImages';
    end
    if nargin<3
        baseFileName='TrapBeamProfile_800nmGRINlens_croppedz';
    end
    if nargin<4
        fileType='.tif';
    end
    if nargin<5
        magnification=0.11; % um/pix
    end
    if nargin<6
        zStepSize=0.8; %um
    end


     %check for an input dataset
    if isempty(dataMatrix)
        disp('No datacube in memory, loading datacube from file')
        %dataMatrix is empty, load data from file
        %generateImageFileList
        fullImageFileList=dir(strcat(imageFolder,'/',baseFileName,'*',fileType));
        testImage=single(imread(strcat(imageFolder,'/',fullImageFileList(1).name)));
        imHeight=size(testImage,1);
        imWidth=size(testImage,2);
        clear testImage
        %allocate memory for dataMatrix
        dataMatrix=zeros(imHeight,imWidth,length(fullImageFileList),'single');
        %load images
        for fileIdx=1:length(fullImageFileList)
            dataMatrix(:,:,fileIdx)=single(imread(strcat(imageFolder,'/',fullImageFileList(fileIdx).name)));
        end
        disp('Datacube loaded')
    else %dataMatrix is not empty, use dataMatrix
        disp('Datacube found in memory, using datacube')
        dataMatrix=single(dataMatrix);
    end
    
    %get maximum pixel value in ROI as true centre
    [~,maxPos]=max(dataMatrix(:));
    maxCoords=zeros(1,3);
    [maxCoords(1),maxCoords(2),maxCoords(3)]=ind2sub(size(dataMatrix),maxPos);
    %determine maximum array size centred on true centre
    croppedYHalfLength=min(maxCoords(1)-1,size(dataMatrix,1)-maxCoords(1)-1);
    croppedXHalfLength=min(maxCoords(2)-1,size(dataMatrix,2)-maxCoords(2)-1);
    croppedZHalfLength=min(maxCoords(3)-1,size(dataMatrix,3)-maxCoords(3)-1);
    %crop ROI around true centre if required
    if 2*croppedYHalfLength+1~=size(dataMatrix,1) && 2*croppedXHalfLength+1~=size(dataMatrix,2) && 2*croppedZHalfLength+1~=size(dataMatrix,3)
        croppedData=dataMatrix(maxCoords(1)-croppedYHalfLength:maxCoords(1)+croppedYHalfLength...
            ,maxCoords(2)-croppedXHalfLength:maxCoords(2)+croppedXHalfLength...
            ,maxCoords(3)-croppedZHalfLength:maxCoords(3)+croppedZHalfLength);
    else
        croppedData=dataMatrix;
    end
    clear dataMatrix
    %create real and pixel based zero-centred coordinate system
    yRange_pix=(1:size(croppedData,1))-floor(size(croppedData,1)/2);
    yRange=yRange_pix*magnification;
    xRange_pix=(1:size(croppedData,2))-floor(size(croppedData,2)/2);
    xRange=xRange_pix*magnification;
    zRange_pix=(1:size(croppedData,3))-floor(size(croppedData,3)/2);
    zRange=zRange_pix*zStepSize;
    
    %normalise intensity (max=1)
    croppedData=croppedData./max(croppedData(:));
    
    %determine tilt of beam (in pixels) using centre-of-mass in each plane
    disp('determining tilt of optic axis')
    xCentre=zeros(1,length(zRange_pix));
    yCentre=zeros(1,length(zRange_pix));
    
%     croppedData_thresholded=croppedData.*(croppedData>0.05);

    for zIdx=1:length(zRange_pix)
        [xCentre(zIdx),yCentre(zIdx)]=determine2DCentreOfMass(squeeze(croppedData(:,:,zIdx)),xRange_pix,yRange_pix,'com');
%         [xCentre(zIdx),yCentre(zIdx)]=determine2DCentreOfMass(squeeze(croppedData_thresholded(:,:,zIdx)),xRange_pix,yRange_pix,'com');
    end
    
    %fit line to CoM traces
    fitRange=1:length(zRange_pix);
    polyX=polyfit(zRange_pix(fitRange),xCentre(fitRange),1);
    polyY=polyfit(zRange_pix(fitRange),yCentre(fitRange),1);
    fitX=polyval(polyX,zRange_pix);
    fitY=polyval(polyY,zRange_pix);
            
    %rotate datacube to counteract tilt
    angleX=atan(polyX(1));
    angleY=atan(polyY(1));
    disp(strcat('Tilt of (',num2str(angleX),')rad in x-z plane and (',num2str(angleY),')rad in y-z plane detected'))
%     angleX=45/360*2*pi;
%     angleY=0/360*2*pi;
    disp('Rotating datacube to correct for tilt')
    workingArray=singleAxisRotate3DArray(croppedData,1,angleX);
    workingArray=singleAxisRotate3DArray(workingArray,2,angleY);
    %determine new "unit vectors" for x,y, and z axes
    rotXMag=magnification*cos(angleX)+zStepSize*sin(angleX);
    rotYMag=magnification*cos(angleY)+zStepSize*sin(angleY);
    rotZStepSize=-1*magnification*sin(angleX)+zStepSize*cos(angleX);
    rotZStepSize=-1*magnification*sin(angleY)+rotZStepSize*cos(angleY);
    clear croppedData;
    disp('Datacube rotated')
    
        %get maximum pixel value in ROI as true centre
        [~,maxPos]=max(workingArray(:));
        maxCoords=zeros(1,3);
        [maxCoords(1),maxCoords(2),maxCoords(3)]=ind2sub(size(workingArray),maxPos);
        %determine maximum array size centred on true centre
        croppedYHalfLength=min(maxCoords(1)-1,size(workingArray,1)-maxCoords(1)-1);
        croppedXHalfLength=min(maxCoords(2)-1,size(workingArray,2)-maxCoords(2)-1);
        croppedZHalfLength=min(maxCoords(3)-1,size(workingArray,3)-maxCoords(3)-1);
        %crop ROI around true centre if required
        if 2*croppedYHalfLength+1~=size(workingArray,1) && 2*croppedXHalfLength+1~=size(workingArray,2) && 2*croppedZHalfLength+1~=size(workingArray,3)
            croppedData=workingArray(maxCoords(1)-croppedYHalfLength:maxCoords(1)+croppedYHalfLength...
                ,maxCoords(2)-croppedXHalfLength:maxCoords(2)+croppedXHalfLength...
                ,maxCoords(3)-croppedZHalfLength:maxCoords(3)+croppedZHalfLength);
        else
            croppedData=workingArray;
        end
        clear workingArray;
        workingArray=croppedData;
        clear croppedData;
        
        %create real and pixel based zero-centred coordinate system
        yRange_pix=(1:size(workingArray,1))-floor(size(workingArray,1)/2);
        xRange_pix=(1:size(workingArray,2))-floor(size(workingArray,2)/2);
        zRange_pix=(1:size(workingArray,3))-floor(size(workingArray,3)/2);
    
    %normalise intensity (max=1)
    workingArray=workingArray./max(workingArray(:));
    
    %rescale rotated coordinates
    yRange=yRange_pix*rotXMag;
    xRange=xRange_pix*rotYMag;
    zRange=zRange_pix*rotZStepSize;

    %plot beam profiles through centre
    figure()
    subplot(1,2,1);
    imagesc(xRange,zRange,squeeze(workingArray(floor(length(yRange)/2)+1,:,:)).');axis image;
    xlabel('x [um]');ylabel('z [um]');
    title('x-z cross-section');
    subplot(1,2,2);
    imagesc(yRange,zRange,squeeze(workingArray(:,floor(length(xRange)/2)+1,:)).');axis image;
    xlabel('y [um]');ylabel('z [um]');
    title('y-z cross-section');
        
    %Gaussian fitting code to determine widths of peaks
%     gauss1Options=fitoptions('gauss1','Lower',[0 -Inf 0]); %Y=a1*exp(-((x-b1)/c1)^2)
%     gaussParams_X=fit(xRange.',squeeze(workingArray(floor(length(yRange)/2),:,floor(length(zRange)/2))).','gauss1',gauss1Options);
%     gaussParams_Y=fit(yRange.',squeeze(workingArray(:,floor(length(xRange)/2),floor(length(zRange)/2))),'gauss1',gauss1Options);
%     gaussParams_Z=fit(zRange.',squeeze(workingArray(floor(length(yRange)/2),floor(length(xRange)/2),:)),'gauss1',gauss1Options);   
%     gaussFit_X=gaussParams_X.a1.*exp(-((xRange-gaussParams_X.b1)/gaussParams_X.c1).^2);
%     gaussFit_Y=gaussParams_Y.a1.*exp(-((yRange-gaussParams_Y.b1)/gaussParams_Y.c1).^2);
%     gaussFit_Z=gaussParams_Z.a1.*exp(-((zRange-gaussParams_Z.b1)/gaussParams_Z.c1).^2);
    gauss2Options=fitoptions('gauss2','Lower',[0 -Inf 0 0 -Inf 0]); %Y=a1*exp(-((x-b1)/c1)^2)+a2*exp(-((x-b2)/c2)^2)
    gaussParams_X=fit(xRange.',squeeze(workingArray(floor(length(yRange)/2),:,floor(length(zRange)/2))).','gauss2',gauss2Options);
    gaussParams_Y=fit(yRange.',squeeze(workingArray(:,floor(length(xRange)/2),floor(length(zRange)/2))),'gauss2',gauss2Options);
    gaussParams_Z=fit(zRange.',squeeze(workingArray(floor(length(yRange)/2),floor(length(xRange)/2),:)),'gauss2',gauss2Options);
    gaussFit_X=gaussParams_X.a1.*exp(-((xRange-gaussParams_X.b1)/gaussParams_X.c1).^2)+gaussParams_X.a2.*exp(-((xRange-gaussParams_X.b2)/gaussParams_X.c2).^2);
    gaussFit_Y=gaussParams_Y.a1.*exp(-((yRange-gaussParams_Y.b1)/gaussParams_Y.c1).^2)+gaussParams_Y.a2.*exp(-((yRange-gaussParams_Y.b2)/gaussParams_Y.c2).^2);
    gaussFit_Z=gaussParams_Z.a1.*exp(-((zRange-gaussParams_Z.b1)/gaussParams_Z.c1).^2)+gaussParams_Z.a2.*exp(-((zRange-gaussParams_Z.b2)/gaussParams_Z.c2).^2);
        
    %plot line profiles through centre
    figure()
    subplot(1,3,1);
    plot(xRange,workingArray(floor(length(yRange)/2)+1,:,floor(length(zRange)/2)+1),xRange,gaussFit_X);
    xlabel('x [um]');ylabel('Intensity [a.u.]');
    title('x-axis line profile');
    xlim([-5 5]);
    subplot(1,3,2);
    plot(yRange,workingArray(:,floor(length(xRange)/2)+1,floor(length(zRange)/2)+1),yRange,gaussFit_Y);
    xlabel('y [um]');ylabel('Intensity [a.u.]');
    title('y-axis line profile');
    xlim([-5 5]);
    subplot(1,3,3);
    plot(zRange,squeeze(workingArray(floor(length(yRange)/2),floor(length(xRange)/2),:)),zRange,gaussFit_Z);
    xlabel('z [um]');ylabel('Intensity [a.u.]');
    title('z-axis line profile');
    xlim([-10 10]);
    
    %determine beam widths
    %(smaller cx parameter is peak, larger cx parameter is width of
    %background)
    xWidth=2*min(gaussParams_X.c1,gaussParams_X.c2);
    yWidth=2*min(gaussParams_Y.c1,gaussParams_Y.c2);
    zWidth=2*min(gaussParams_Z.c1,gaussParams_Z.c2);
    
end